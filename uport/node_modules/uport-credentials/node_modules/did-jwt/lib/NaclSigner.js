"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _tweetnaclUtil = _interopRequireDefault(require("tweetnacl-util"));

function encodeBase64Url(data) {
  return _tweetnaclUtil.default.encodeBase64(data).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}
/**
*  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm. It also defines
*  an interface that you can also implement yourself and use in our other modules.
*
*  The signing function itself takes the data as a string parameter and returls a base64Url encoded signature
*
*  @example
*  const signer = NaclSigner(process.env.PRIVATE_KEY)
*  signer(data, (err, signature) => {
*    ...
*  })
*
*  @param    {String}         base64PrivateKey    a 64 byte base64 encoded private key
*  @return   {Function}                     a configured signer function
*/


function NaclSigner(base64PrivateKey) {
  var privateKey = _tweetnaclUtil.default.decodeBase64(base64PrivateKey);

  return (
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(data) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", encodeBase64Url(_tweetnacl.default.sign.detached(_tweetnaclUtil.default.decodeUTF8(data), privateKey)));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }()
  );
}

module.exports = NaclSigner;