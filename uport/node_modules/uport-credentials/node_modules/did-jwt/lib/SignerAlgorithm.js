"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ES256KSigner = ES256KSigner;
exports.Ed25519Signer = Ed25519Signer;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _base64url = _interopRequireDefault(require("base64url"));

var _buffer = require("buffer");

function ES256KSigner() {
  var recoverable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  function toJose(_ref) {
    var r = _ref.r,
        s = _ref.s,
        recoveryParam = _ref.recoveryParam;

    var jose = _buffer.Buffer.alloc(recoverable ? 65 : 64);

    _buffer.Buffer.from(r, 'hex').copy(jose, 0);

    _buffer.Buffer.from(s, 'hex').copy(jose, 32);

    if (recoverable) {
      if (recoveryParam === undefined) throw new Error('Signer did not return a recoveryParam');
      jose[64] = recoveryParam;
    }

    return _base64url.default.encode(jose);
  }

  return (
    /*#__PURE__*/
    function () {
      var _sign = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(payload, signer) {
        var signature;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return signer(payload);

              case 2:
                signature = _context.sent;
                return _context.abrupt("return", toJose(signature));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function sign(_x, _x2) {
        return _sign.apply(this, arguments);
      }

      return sign;
    }()
  );
}

function Ed25519Signer() {
  return (
    /*#__PURE__*/
    function () {
      var _sign2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(payload, signer) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", signer(payload));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function sign(_x3, _x4) {
        return _sign2.apply(this, arguments);
      }

      return sign;
    }()
  );
}

var algorithms = {
  ES256K: ES256KSigner(),
  'ES256K-R': ES256KSigner(true),
  'Ed25519': Ed25519Signer()
};

function SignerAlgorithm(alg) {
  var impl = algorithms[alg];
  if (!impl) throw new Error("Unsupported algorithm ".concat(alg));
  return impl;
}

module.exports = SignerAlgorithm;